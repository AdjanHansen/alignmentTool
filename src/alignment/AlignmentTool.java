/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package alignment;



import java.io.*;
import xmleditorkit.*;
import javax.swing.*;
import java.awt.*;



/**
 *
 * @author Adjan
 */







public class AlignmentTool extends javax.swing.JFrame {
//basically the main part
    /**
     * Creates new form NewJFrame
     */
  

  static boolean hasAligned;
  static DefaultListModel listModel = new DefaultListModel();
  static DefaultListModel listModel2 = new DefaultListModel();
  static DefaultListModel listModel3 = new DefaultListModel();
  static DefaultListModel listModel4 = new DefaultListModel();
  XmlReadWrite newXRead = new XmlReadWrite();
  DialogOpen opener = new DialogOpen();
    public AlignmentTool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(listModel);
        jScrollPane5 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList(listModel2);
        jButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList(listModel3);
        jScrollPane7 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList(listModel4);
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("test"); // NOI18N

        jPanel2.setPreferredSize(new java.awt.Dimension(500, 550));

        jPanel3.setMaximumSize(new java.awt.Dimension(830, 700));
        jPanel3.setPreferredSize(new java.awt.Dimension(600, 500));

        jEditorPane1.setDragEnabled(true);
        jEditorPane1.setEditorKit(new XMLEditorKit());
        jEditorPane1.setMinimumSize(new java.awt.Dimension(200, 100));
        jScrollPane4.setViewportView(jEditorPane1);

        jList1.setCellRenderer(new WordListCellRenderer());
        jScrollPane1.setViewportView(jList1);

        jList2.setCellRenderer(new WordListCellRenderer());
        jScrollPane5.setViewportView(jList2);

        jButton2.setText("Align");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList3.setCellRenderer(new AlignedWordListCellRendererID());
        jScrollPane6.setViewportView(jList3);

        jList4.setCellRenderer(new AlignedWordListCellRendererWord());
        jScrollPane7.setViewportView(jList4);

        jButton1.setText("Load xml");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("break up alignment");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Save xml");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Insert source placeholder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Insert target placeholder");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setText("Alignment Tool");

        jLabel1.setText("Source text");

        jLabel3.setText("Target text");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(96, 96, 96)
                .add(jButton1)
                .add(270, 270, 270)
                .add(jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 310, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(27, 27, 27)
                        .add(jLabel1)
                        .add(271, 271, 271)
                        .add(jLabel3)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 274, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(19, 19, 19)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButton6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane7)))
                        .add(694, 694, 694))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(54, 54, 54))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(27, 27, 27)
                                .add(jButton2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jButton3)
                                .add(12, 12, 12)
                                .add(jButton6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jButton4)
                                .add(69, 69, 69)))
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 407, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton5))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 899, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 538, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Select XML file");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("How to use AT");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("About AT");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       // determines what happens when you click on the menu
        // TODO add your handling code here:
        
        
        opener.open();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // jButton5 saves alignments
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         
        try{
            
            DialogSave saver = new DialogSave();
            saver.save();
            if(DialogSave.fileName==null){
                //do nothing
            }
            else{
            for(int i=0; i<listModel4.size(); i++){
                Aligned tempAligned = (Aligned)listModel4.get(i);
                if(tempAligned.getTextColor().equals(Color.red)){
                    //do nothing
                    System.out.println("Doing nothing with: "+tempAligned.getAlignedWords());
                }
                else{
                    Alignments.alignedToStore.add((Aligned)listModel4.get(i));
                    System.out.println("Saving aligned words");
                    System.out.println("Length of listToSave: " + Alignments.alignedToStore.size());
                }
                
               
                System.out.println(tempAligned.getName());
            }
            newXRead.toXML();
            newXRead.writeXML();
            Alignments.alignedToStore.clear();
            jList1.repaint();
            jList2.repaint();
            jList3.repaint();
            jList4.repaint();
        }
        }
        catch(IOException e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // Breaks up alignments
        if (jList4.isSelectionEmpty()!=true){
            Alignments.alignedListToErase=jList4.getSelectedValuesList();

            for(int i=0; i<Alignments.alignedListToErase.size(); i++){
                System.out.println(Alignments.alignedListToErase.size());
                Aligned alignmentToErase = (Aligned)Alignments.alignedListToErase.get(i);
                System.out.println(alignmentToErase.getAlignedWords());
                System.out.println("Length of list of aligned after pressing button 4: "+Alignments.alignedList.size());
                for(int j=0; j<alignmentToErase.listSource.size(); j++){
                    SelectedWord selectedWordToErase =(SelectedWord)alignmentToErase.getSourceWord(j);
                    //int selectedWordId = selectedWordToErase.getId();

                    for(int k=0; k<AlignmentTool.listModel.size(); k++){
                        SelectedWord selectedWordToEraseInList = (SelectedWord)AlignmentTool.listModel.getElementAt(k);
                        if(selectedWordToErase.lineID==selectedWordToEraseInList.lineID&&selectedWordToErase.wordNumber==selectedWordToEraseInList.wordNumber){
                            System.out.println("Vergleich = true");
                            selectedWordToEraseInList.setTextColor(Color.blue);

                        }
                        else{
                            System.out.println("Vergleich = false");
                        }
                    }
                    //               SelectedWord wordInListModel = (SelectedWord)NewJFrame.listModel.getElementAt(selectedWordId-1);
                    //               System.out.println("ID des zu löschenden Alignments: " + selectedWordId);
                    //               System.out.println("ID des Alignments im listModel: " + wordInListModel.getId());
                    //               System.out.println("Name des Wortes im listmodel: " + wordInListModel.getWord());
                    //               wordInListModel.setTextColor(Color.blue);
                }

                for(int j=0; j<alignmentToErase.listTarget.size(); j++){
                    SelectedWord selectedWordToErase =(SelectedWord)alignmentToErase.getTargetWord(j);

                    for(int k=0; k<AlignmentTool.listModel2.size(); k++){
                        SelectedWord selectedWordToEraseInList = (SelectedWord)AlignmentTool.listModel2.getElementAt(k);
                        if(selectedWordToErase.lineID==selectedWordToEraseInList.lineID&&selectedWordToErase.wordNumber==selectedWordToEraseInList.wordNumber){
                            selectedWordToEraseInList.setTextColor(Color.blue);
                        }
                    }
                }
                //           for(int j=0; j<alignmentToErase.listTarget.size(); j++){
                    //               SelectedWord selectedWordToErase =(SelectedWord)alignmentToErase.getTargetWord(j);
                    //               int selectedWordId = selectedWordToErase.getId();
                    //
                    //               SelectedWord wordInListModel = (SelectedWord)NewJFrame.listModel2.getElementAt(selectedWordId-1);
                    //               System.out.println("ID des zu löschenden Target-Alignments: " + selectedWordId);
                    //               System.out.println("ID des Target-Alignments im listModel: " + wordInListModel.getId());
                    //               System.out.println("Name des Target-Wortes im listmodel: " + wordInListModel.getWord());
                    //               wordInListModel.setTextColor(Color.blue);

                }
                int[] indexToErase = jList4.getSelectedIndices();
                for(int k=0; k<indexToErase.length; k++){
                    int index=indexToErase[k];
                    listModel4.removeElementAt(index);
                    listModel3.removeElementAt(index);
                    jList1.repaint();
                    jList2.repaint();
                    jList1.clearSelection();
                    jList2.clearSelection();
                }
            }

            System.out.println("End of button 4: break up alignment");

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //determines what happens when you press button1
        //
        opener.reset();

        TextFinder findText = new TextFinder();

        jEditorPane1.setText("");
        try{
            FileInputStream fileStream = new FileInputStream(DialogOpen.fileName);
            //jEditorPane1.read(fileStream, null); => very slow with large xml files

            newXRead.getXML();
            findText.findText();
            
            
            
            for(int i=0; i<Alignments.alignedToLoad.size();i++){
                Aligned alignedWords = (Aligned)Alignments.alignedToLoad.get(i);

                System.out.println("ID aus List: " + alignedWords.id);
                System.out.println(alignedWords.getAlignedWords());
                System.out.println("Length of list of aligned: "+Alignments.alignedToLoad.size());
                //               Object[] sourceWordArray = new Aligned[alignedWords.listSource.size()];
                //               sourceWordArray = alignedWords.listSource.toArray();
                //               tempAlignedSourceWords = Arrays.deepToString(sourceWordArray);
                //               System.out.println(tempAlignedSourceWords);
                
                listModel3.addElement(alignedWords);
                listModel4.addElement(alignedWords);
                
               
            }

            Alignments.alignedList.clear();
            System.out.println("End of button3: show alignment");
            
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("End of Button 1: load xml");
        
        //System.out.println(newXRead.getTargetText());
        //jTextArea1.append(findThatText.findSourceText());

    }//GEN-LAST:event_jButton1ActionPerformed
// jButton2 does the actual alignment
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jList1.isSelectionEmpty()!=true && jList2.isSelectionEmpty()!=true){ // right now, an alignment has to contain at least one element of source and at least one element of target
            System.out.println("selection in both source and target is not empty");
            Aligned newAligned = new Aligned(jList1.getSelectedValuesList(), jList2.getSelectedValuesList(),Color.BLUE, Alignments.alignedId); //blue is the standard color, just in case the alignment already exists
            if(Alignments.alignedList.isEmpty()==false){
                System.out.println("There is at least 1 alignment in the list");
                
                    
                    
                    System.out.println("This alignment is new!");
                    for(int j=0; j<newAligned.listSource.size(); j++){
                        newAligned.getSourceWord(j).setTextColor(Color.yellow); //makes all aligned source text words yellow
                    }
                    for(int j=0; j<newAligned.listTarget.size(); j++){
                        newAligned.getTargetWord(j).setTextColor(Color.yellow); //makes all aligned target text words yellow
                    }
                    
                    Alignments.alignedList.add(newAligned); //the alignment is added to the static list of alignments

                    System.out.println(Alignments.alignedId);
                    Alignments.increaseAlignedID(); //gives every alignment an individual alignment id number -> not used as a counter that has to be reset or altered after an alignment is broken up again
                    jList1.clearSelection();
                    jList2.clearSelection();
                
                    for(int j=0; j<Alignments.alignedList.size();j++){ //gets all alignments in the alignment list
                        Aligned alignedWords = (Aligned)Alignments.alignedList.get(j); //that's the individual alignment
                        if(listModel3.contains(alignedWords)&&listModel4.contains(alignedWords)){
                            //do nothing, because, like above, there shouldn't be multiple alignments. However, this never should be true, if the above works
                        }
                        else{
                            System.out.println("ID aus List: " + alignedWords.id);
                            System.out.println(alignedWords.getAlignedWords());
                            System.out.println("Length of list of aligned: "+Alignments.alignedList.size());
                            listModel3.addElement(alignedWords); //the list models know what to do with the objects (see list models for details)
                            listModel4.addElement(alignedWords);
                            }
                    }       
            }
            else if(Alignments.alignedList.isEmpty()==true){
                System.out.println("There are no alignments in the list");
                for(int j=0; j<newAligned.listSource.size(); j++){
                        newAligned.getSourceWord(j).setTextColor(Color.yellow); //makes all aligned source text words yellow
                        }
                        for(int j=0; j<newAligned.listTarget.size(); j++){
                        newAligned.getTargetWord(j).setTextColor(Color.yellow); //makes all aligned target text words yellow
                        }
                        Alignments.alignedList.add(newAligned); //the alignment is added to the static list of alignments

                        System.out.println(Alignments.alignedId);
                        Alignments.increaseAlignedID(); //gives every alignment an individual alignment id number -> not used as a counter that has to be reset or altered after an alignment is broken up again
                        jList1.clearSelection();
                        jList2.clearSelection();
                
                        for(int j=0; j<Alignments.alignedList.size();j++){ //gets all alignments in the alignment list
                            Aligned alignedWords = (Aligned)Alignments.alignedList.get(j); //that's the individual alignment
                            if(listModel3.contains(alignedWords)&&listModel4.contains(alignedWords)){
                                //do nothing, because, like above, there shouldn't be multiple alignments. However, this never should be true, if the above works
                            }
                            else{
                                System.out.println("ID aus List: " + alignedWords.id);
                                System.out.println(alignedWords.getAlignedWords());
                                System.out.println("Length of list of aligned: "+Alignments.alignedList.size());
                                listModel3.addElement(alignedWords); //the list models know what to do with the objects (see list models for details)
                                listModel4.addElement(alignedWords);
                            }
                        }
            }
        }
        //Alignments.alignedList.clear();
        System.out.println("End of button2: align");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     // creates the source placeholder
        Placeholder placeHolder = new Placeholder();
        placeHolder.insertSourcePlaceHolder(jList1.getSelectedIndex());
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // creates the target placeholder
        Placeholder placeHolder = new Placeholder();
        placeHolder.insertTargetPlaceHolder(jList2.getSelectedIndex());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // I want to add some kind description on how to use the software (a pic?).
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // So here I provided some information concerning version & developer
//        JOptionPane.showMessageDialog(jPanel3,
//                                "Alignment Tool 0.9.1 BETA" + "\n" + "\n" + "Adjan Hansen, 2013" + "\n" + "adjan.hansen@rwth-aachen.de",
//                                "About Alignment Tool", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlignmentTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlignmentTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlignmentTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlignmentTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.setProperty("file.encoding", "UTF-8");
       
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlignmentTool().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    javax.swing.JList jList1;
    javax.swing.JList jList2;
    javax.swing.JList jList3;
    javax.swing.JList jList4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
